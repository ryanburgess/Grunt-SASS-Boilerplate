// -----------------------------------------

	// Linear Gradients
	
 // -------------------------------------------

 // example: @include linearGradient($evernoteGreen, $darkGreen);

@mixin linearGradient($top, $bottom){
	background: $top; /* Old browsers */
	background: -moz-linear-gradient(top,  $top 0%, $bottom 100%); /* FF3.6+ */
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$top), color-stop(100%,$bottom)); /* Chrome,Safari4+ */
	background: -webkit-linear-gradient(top,  $top 0%,$bottom 100%); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient(top,  $top 0%,$bottom 100%); /* Opera 11.10+ */
	background: -ms-linear-gradient(top,  $top 0%,$bottom 100%); /* IE10+ */
	background: linear-gradient(to bottom,  $top 0%,$bottom 100%); /* W3C */
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$top', endColorstr='$bottom',GradientType=0 ); /* IE6-9 */
}

// -----------------------------------------

	// REM Units with PX fallback

// -------------------------------------------

 // example: @include rem("margin", 10, 5, 10, 5);
 // example: @include rem("font-size", 14);

@mixin rem($property, $values...) {
	$n: length($values);
  	$i: 1;

  	$pxlist: ();
  	$remlist: ();

  	@while $i <= $n {
		$itemVal: (nth($values, $i));
		@if $itemVal != "auto"{
			$pxlist: append($pxlist, $itemVal + px);
	    	$remlist: append($remlist, ($itemVal / 10) + rem);
		}@else{
			$pxlist: append($pxlist, auto);
			$remlist: append($remlist, auto);
		}
 		
	
    	$i: $i + 1;
  	}

  	#{$property}: $pxlist;
  	#{$property}: $remlist;
}

// -----------------------------------------

	// Retina Images
	
// -------------------------------------------

// example: @include retina("logo2x.png", 100, 50);

@mixin retina($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width + px $height + px;
    background-size: $width / 10 + rem $height / 10 + rem;
  }
}

// -----------------------------------------

	// Media Query Breakpoints
	
// -------------------------------------------

// example @include breakpoint(940){ width:80%; }

@mixin breakpoint($size) {
	@media only screen and (max-width : $size + px) { @content; }
}


// -----------------------------------------

	// Rounded Corners
	
 // -------------------------------------------

 // example: @include roundedCorners(10);

@mixin roundedCorners($size){
  	-webkit-border-radius: $size + px;
     	-moz-border-radius: $size + px;
          	border-radius: $size + px;  
}

// Rounded Corners Top Only
@mixin roundedTop($size){
	-moz-border-radius: $size + px $size + px 0 0;
	-webkit-border-radius: $size + px $size + px 0 0;
	border-radius:$size $size + px 0 0;
}

// Opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}


// -----------------------------------------

	// Arrows / Triangles

// -------------------------------------------

 // example: @include arrow("left", $evernoteGreen, 10);

@mixin arrow($direction, $color, $size){
	$pxSize: $size +px;
	$remSize: ($size /10)+rem;
	
	#{width}: 0;
  	#{height}: 0;
	
	@if $direction == "left"{
		border-top: $pxSize solid transparent;
		border-right: $pxSize solid $color;
		border-bottom: $pxSize solid transparent;
		
		border-top: $remSize solid transparent;
		border-right: $remSize solid $color;
		border-bottom: $remSize solid transparent;
	}@else if $direction == "right"{
		border-top: $pxSize solid transparent;
		border-bottom: $pxSize solid transparent;
		border-left: $pxSize solid $color;
		
		border-top: $remSize solid transparent;
		border-bottom: $remSize solid transparent;
		border-left: $remSize solid $color;
	}@else if $direction == "up"{
		border-left: $pxSize solid transparent;
		border-right: $pxSize solid transparent;
		border-bottom: $pxSize solid $color;
		
		border-left: $remSize solid transparent;
		border-right: $remSize solid transparent;
		border-bottom: $remSize solid $color;
	}@else if $direction == "down"{
		border-left: $pxSize solid transparent;
		border-right: $pxSize solid transparent;
		border-top: $pxSize solid $color;
		
		border-left: $remSize solid transparent;
		border-right: $remSize solid transparent;
		border-top: $remSize solid $color;
	}
		
}

// -----------------------------------------

//	Box Model

// -------------------------------------------

@mixin box-sizing($box-model) {
  -webkit-box-sizing: $box-model;
     -moz-box-sizing: $box-model;
          box-sizing: $box-model;
}

// -----------------------------------------

	// Clearfix after element

// -------------------------------------------

 // example: @include clearfix();

@mixin clearfix() {
    & {
        *zoom: 1;
    }
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

// -----------------------------------------

	// Hide Elements

// -------------------------------------------

 // example: @include hide-text();

 @mixin hide-text() {
 	position:relative;
    text-indent:-99999px;
    display: inline-block;
 }